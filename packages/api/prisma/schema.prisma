// packages/api/prisma/schema.prisma
generator client {
  provider = "prisma-client-js" // Diz para gerar um cliente JS/TS
}

datasource db {
  provider = "postgresql" // Indica que estamos usando PostgreSQL
  url      = env("DATABASE_URL") // Pega a string de conexão do arquivo .env
}


// --- Definições de Enums ---
// Enums limitam os valores possíveis para um campo, garantindo consistência.

enum UserRole {
  REQUESTER // Papel de quem solicita pagamentos
  DIRECTOR  // Papel de quem aprova/rejeita/cancela (Diretor)
  // ADMIN // Poderíamos adicionar um Admin no futuro
}

enum PaymentStatus {
  PENDING   // Pagamento aguardando ação
  APPROVED  // Pagamento aprovado
  REJECTED  // Pagamento rejeitado (para correção)
  CANCELLED // Pagamento cancelado
}



model User {
  // --- Campos (Colunas) ---
  id            String    @id @default(cuid()) // Chave Primária: String única (CUID é gerado automaticamente)
  username      String    @unique              // Nome de usuário para login: Deve ser único
  passwordHash  String                       // Guarda o HASH da senha (NUNCA a senha real)
  name          String                       // Nome completo do usuário
  role          UserRole  @default(REQUESTER)  // Papel do usuário (usa o Enum UserRole), padrão é REQUESTER
  createdAt     DateTime  @default(now())      // Data/Hora de criação (gerado automaticamente)
  updatedAt     DateTime  @updatedAt           // Data/Hora da última atualização (atualizado automaticamente)

  // --- Relacionamentos ---
  // Define que um Usuário pode ter muitos Pagamentos associados a ele como solicitante.
  paymentsRequested Payment[] @relation("RequestedBy")
  // Define que um Usuário pode ter muitos Pagamentos associados a ele como aprovador.
  paymentsApproved  Payment[] @relation("ApprovedBy")
  // Define que um Usuário pode ter muitos Pagamentos associados a ele como cancelador.
  paymentsCancelled Payment[] @relation("CancelledBy")

  // --- Mapeamento (Opcional) ---
  @@map("users") // Define explicitamente o nome da tabela no banco como "users" (boa prática)
}


// --- Definição do Modelo Payment (Tabela 'payments') ---

model Payment {
  // --- Campos (Colunas) ---
  id            String        @id @default(cuid()) // Chave Primária
  amount        Float                          // Valor. (Usar Decimal para maior precisão financeira no futuro)
  currency      String        @db.VarChar(3)     // Código da moeda (ex: BRL), limita a 3 caracteres no DB
  payee         String                         // Nome/ID do recebedor
  description   String?                        // Descrição (opcional - o '?' indica opcional)
  status        PaymentStatus @default(PENDING)  // Status (usa o Enum PaymentStatus), padrão é PENDING
  dueDate       DateTime?                      // Data de vencimento (opcional)

  // --- Chaves Estrangeiras e Relacionamentos ---
  requesterId   String                         // Guarda o ID do usuário solicitante (obrigatório)
  // Define a relação: este pagamento pertence a um 'User' através do campo 'requesterId'
  // O nome "RequestedBy" deve ser o mesmo usado no model User para ligar a relação.
  requester     User          @relation("RequestedBy", fields: [requesterId], references: [id])

  approverId    String?                        // ID do aprovador (opcional, só preenchido quando aprovado/rejeitado)
  // Define a relação opcional com o aprovador.
  approver      User?         @relation("ApprovedBy", fields: [approverId], references: [id])
  approvedAt    DateTime?                      // Data/Hora da aprovação (opcional)

  cancellerId   String?                        // ID de quem cancelou (opcional)
  // Define a relação opcional com o cancelador.
  canceller     User?         @relation("CancelledBy", fields: [cancellerId], references: [id])
  cancelledAt   DateTime?                      // Data/Hora do cancelamento (opcional)

  // --- Timestamps Automáticos ---
  createdAt     DateTime @default(now())       // Data/Hora de criação
  updatedAt     DateTime @updatedAt            // Data/Hora da última atualização

  // --- Relações Futuras (Comentadas por enquanto) ---
  // comments    PaymentComment[] // Um pagamento terá muitos comentários
  // attachments Attachment[]   // Um pagamento terá muitos anexos

  // --- Mapeamento (Opcional) ---
  @@map("payments") // Nome da tabela no banco como "payments"
}

// Os modelos PaymentComment e Attachment serão definidos nas Fases 3 e 4.